# coding: utf-8

"""
    PowerManifest API

    API for PowerManifest backend

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class JournalEntryPreview(BaseModel):
    """
    JournalEntryPreview
    """  # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Entry ID")
    content: Optional[StrictStr] = Field(default=None, description="Truncated to 200 characters")
    mood: Optional[StrictStr] = Field(default=None, description="Emoji representing mood")
    timestamp: Optional[datetime] = Field(default=None, description="Entry timestamp")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Entry tags")
    hasAffirmation: Optional[StrictBool] = Field(default=None, description="Whether entry has affirmation", alias="hasAffirmation")
    hasScript: Optional[StrictBool] = Field(default=None, description="Whether entry has script", alias="hasScript")
    __properties: ClassVar[List[str]] = ["id", "content", "mood", "timestamp", "tags", "hasAffirmation", "hasScript"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JournalEntryPreview from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if content (nullable) is None
        # and model_fields_set contains the field
        if self.content is None and "content" in self.model_fields_set:
            _dict['content'] = None

        # set to None if mood (nullable) is None
        # and model_fields_set contains the field
        if self.mood is None and "mood" in self.model_fields_set:
            _dict['mood'] = None

        # set to None if timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.timestamp is None and "timestamp" in self.model_fields_set:
            _dict['timestamp'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        # set to None if hasAffirmation (nullable) is None
        # and model_fields_set contains the field
        if self.hasAffirmation is None and "hasAffirmation" in self.model_fields_set:
            _dict['hasAffirmation'] = None

        # set to None if hasScript (nullable) is None
        # and model_fields_set contains the field
        if self.hasScript is None and "hasScript" in self.model_fields_set:
            _dict['hasScript'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JournalEntryPreview from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "content": obj.get("content"),
            "mood": obj.get("mood"),
            "timestamp": obj.get("timestamp"),
            "tags": obj.get("tags"),
            "hasAffirmation": obj.get("hasAffirmation"),
            "hasScript": obj.get("hasScript")
        })
        return _obj